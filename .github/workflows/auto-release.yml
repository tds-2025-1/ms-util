name: Automatic Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Tornar Gradle Executavel
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build
          
      - name: Calculate version
        id: calculate_version
        run: |
          # Get the latest tag if it exists
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          
          # Debug output
          echo "Latest tag found: ${LATEST_TAG:-none}"
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags yet, start with v0.0.1-alpha
            NEW_VERSION="0.0.1-alpha"
            echo "No tags found, using initial version: $NEW_VERSION"
          else
            LATEST_VERSION=${LATEST_TAG#v}
            echo "Processing tag without v prefix: $LATEST_VERSION"
            
            # Use string manipulation to parse version components
            if [[ "$LATEST_VERSION" == *-alpha ]]; then
              # Split on dash to separate version and alpha part
              VERSION_PART=$(echo "$LATEST_VERSION" | cut -d'-' -f1)
              
              # Get major, minor, patch
              MAJOR=$(echo "$VERSION_PART" | cut -d'.' -f1)
              MINOR=$(echo "$VERSION_PART" | cut -d'.' -f2)
              PATCH=$(echo "$VERSION_PART" | cut -d'.' -f3)
              
              echo "Extracted: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
              
              # Verify all components are numeric
              if [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && 
                    "$PATCH" =~ ^[0-9]+$ ]]; then
                # Increment patch version
                PATCH=$((PATCH+1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-alpha"
                echo "Incremented to: $NEW_VERSION"
              else
                echo "Warning: Non-numeric version components. Defaulting to 0.0.1-alpha"
                NEW_VERSION="0.0.1-alpha"
              fi
            else
              echo "Warning: Version format doesn't include alpha. Got: $LATEST_VERSION"
              echo "Defaulting to: 0.0.1-alpha"
              NEW_VERSION="0.0.1-alpha"
            fi
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: v$NEW_VERSION"

      - name: Create tag
        run: |
          NEW_VERSION=${{ steps.calculate_version.outputs.new_version }}
          echo "Creating tag for version: v$NEW_VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.calculate_version.outputs.new_version }}
          name: Release v${{ steps.calculate_version.outputs.new_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}